// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SmartTestTaskKozitski.DAL.Data;

#nullable disable

namespace SmartTestTaskKozitski.DAL.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SmartTestTaskKozitski.DAL.Entities.Contract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProcessEquipmentTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductionFacilityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProcessEquipmentTypeId")
                        .IsUnique();

                    b.HasIndex("ProductionFacilityId")
                        .IsUnique();

                    b.ToTable("Contracts");
                });

            modelBuilder.Entity("SmartTestTaskKozitski.DAL.Entities.ProcessEquipmentType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("ProcessEquipmentTypes");
                });

            modelBuilder.Entity("SmartTestTaskKozitski.DAL.Entities.ProductionFacility", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("ProductionFacilities");
                });

            modelBuilder.Entity("SmartTestTaskKozitski.DAL.Entities.Contract", b =>
                {
                    b.HasOne("SmartTestTaskKozitski.DAL.Entities.ProcessEquipmentType", "ProcessEquipmentType")
                        .WithOne()
                        .HasForeignKey("SmartTestTaskKozitski.DAL.Entities.Contract", "ProcessEquipmentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartTestTaskKozitski.DAL.Entities.ProductionFacility", "ProductionFacility")
                        .WithOne()
                        .HasForeignKey("SmartTestTaskKozitski.DAL.Entities.Contract", "ProductionFacilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProcessEquipmentType");

                    b.Navigation("ProductionFacility");
                });

            modelBuilder.Entity("SmartTestTaskKozitski.DAL.Entities.ProcessEquipmentType", b =>
                {
                    b.OwnsOne("SmartTestTaskKozitski.DAL.Entities.Specifications", "Specifications", b1 =>
                        {
                            b1.Property<Guid>("ProcessEquipmentTypeId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Area")
                                .HasColumnType("int")
                                .HasColumnName("Area");

                            b1.Property<long>("Code")
                                .HasColumnType("bigint")
                                .HasColumnName("Code");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Name");

                            b1.HasKey("ProcessEquipmentTypeId");

                            b1.HasIndex("Code")
                                .IsUnique();

                            b1.ToTable("ProcessEquipmentTypes");

                            b1.WithOwner()
                                .HasForeignKey("ProcessEquipmentTypeId");
                        });

                    b.Navigation("Specifications")
                        .IsRequired();
                });

            modelBuilder.Entity("SmartTestTaskKozitski.DAL.Entities.ProductionFacility", b =>
                {
                    b.OwnsOne("SmartTestTaskKozitski.DAL.Entities.Specifications", "Specifications", b1 =>
                        {
                            b1.Property<Guid>("ProductionFacilityId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Area")
                                .HasColumnType("int")
                                .HasColumnName("Area");

                            b1.Property<long>("Code")
                                .HasColumnType("bigint")
                                .HasColumnName("Code");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Name");

                            b1.HasKey("ProductionFacilityId");

                            b1.HasIndex("Code")
                                .IsUnique();

                            b1.ToTable("ProductionFacilities");

                            b1.WithOwner()
                                .HasForeignKey("ProductionFacilityId");
                        });

                    b.Navigation("Specifications")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
